producer_cosumer:

#include <pthread.h>
#include <stdlib.h>
#include <stdio.h>
#include <semaphore.h>

int capacity;
int *queue;
int max;
sem_t full, empty;
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

void *producer( void * param){
int in = 0;
int i;
for (i=0; i<max; i++ ){
sem_wait(&empty);  
pthread_mutex_lock( &mutex );
queue[in] = i+1;
in = (in+1)%capacity;
printf("Produced %d\n", i+1);
pthread_mutex_unlock( &mutex );
sem_post( &full ); 
}
}
void *consumer(void * param){
int out = 0;
int i;
for ( i=0; i<max; i++ ){
sem_wait(&full);
pthread_mutex_lock( &mutex );
printf("Consumed %i\n", queue[out]);
out= (out+1)%capacity;
pthread_mutex_unlock( &mutex );
sem_post(&empty);  
}
}
int main(){
printf("Enter the size of the buffer: ");
scanf("%d", &capacity);
printf("Enter the number of items to produce: ");
scanf("%d", &max);
queue = malloc((capacity) *sizeof(int));
pthread_t threads[2];
sem_init( &full, 0, 0 );
sem_init( &empty, 0, capacity);
pthread_create( &threads[0], 0, producer, 0 );
pthread_create( &threads[1], 0, consumer, 0 );
pthread_join( threads[0], 0 );
pthread_join( threads[1], 0 );
sem_destroy( &full );
sem_destroy( &empty );
}


reader_writer:

#include <stdio.h>
#include <unistd.h>
#include <semaphore.h>
#include <pthread.h>

sem_t db, mutex;
int readcount = 0;

void *writer(void * a){
int arg = (int)a;
sem_wait(&db);
printf("W - Writer %d is operating\n", arg);
printf("W - Writer %d done\n",arg);
sem_post(&db);
}

void *reader(void * a){
int arg = (int) a;
sem_wait(&mutex);
readcount++;
if(readcount == 1)
sem_wait(&db);
sem_post(&mutex);
printf("R - Reader %d is operating\n",arg);
sem_wait(&mutex);
readcount--;
if (readcount == 0)
sem_post(&db);
printf("R - Reader %d done\n",arg);
sem_post(&mutex);
}

int main(){
int r, w;
printf("Enter the number of readers and writers: ");
scanf("%d %d", &r, &w);
pthread_t readers[r], writers[w];
sem_init(&mutex, 0, 1);
sem_init(&db, 0, 1);
int i=0;
while(i<r||i<w){
if(i<r)
pthread_create(&readers[i], NULL, reader,(void *)i+1);
if(i<w)
pthread_create(&writers[i], NULL, writer,(void *)i+1);
i++;
}
i=0;
while(i<r || i<w){
if(i<r)
pthread_join(readers[i], NULL);    
if(i<w)
pthread_join(writers[i], NULL);
i++; 
}
sem_destroy(&mutex);
sem_destroy(&db);
return 0;
}
